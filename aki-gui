#!/bin/bash
# -*- coding: utf-8 -*-
#
#  aki - Antergos Kernel Installer
#  Copyright Â© 2017 Antergos
#
#  Loosely based on code from mhwd-kernel from Manjaro
#
#  Aki is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  Aki is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The following additional terms are in effect as per Section 7 of the license:
#
#  The preservation of all legal notices and author attributions in
#  the material or in the Appropriate Legal Notices displayed
#  by works containing it is required.
#
#  You should have received a copy of the GNU General Public License
#  along with Aki; If not, see <http://www.gnu.org/licenses/>.

#set -euo pipefail

KERNEL_NAMES=""
KERNEL_AUR_NAMES=""
DATA_PATH="/usr/share/aki"
KERNEL_NAMES_FILE="kernels.txt"
KERNEL_AUR_NAMES_FILE="kernels-aur.txt"
AUR_HELPERS="yaourt packer pacaur"
AUR_ENABLED="n"

TITLE="Antergos Kernel Instaler (AKI)"
CLASS="Aki"

ICON='<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 48 48"><defs><linearGradient gradientUnits="userSpaceOnUse" x2="47" x1="0"><stop stop-color="#a9a3d4"/><stop offset=".47" stop-color="#87baff"/><stop offset="1" stop-color="#89ec85"/></linearGradient><linearGradient y2="500.8" x2="0" y1="546.8" gradientUnits="userSpaceOnUse" id="0"><stop stop-color="#141414"/><stop offset="1" stop-color="#2d2d2f"/></linearGradient></defs><g transform="translate(-486.76-502.73)" stroke-width="1.317"><rect y="500.8" x="385.57" height="46" width="46" fill="url(#0)" rx="23" stroke-width="1.515" transform="matrix(1.04348 0 0 1.04348 84.43-19.851)"/><path d="m267.92 119.46c-.425-3.778-4.83-6.617-8.639-6.617-12.315 0-23.24-7.231-27.826-18.414-4.682-11.454-1.663-24.812 7.515-33.23 2.889-2.641 3.24-7.06.817-10.133-6.303-8-13.467-15.234-21.289-21.5-3.063-2.458-7.557-2.116-10.213.825-8.01 8.871-22.398 12.168-33.516 7.529-11.57-4.867-18.866-16.591-18.15-29.18.235-3.953-2.654-7.39-6.595-7.849-10.04-1.161-20.16-1.197-30.23-.08-3.896.43-6.785 3.786-6.654 7.689.438 12.461-6.946 23.98-18.401 28.672-10.985 4.487-25.27 1.218-33.27-7.574-2.642-2.896-7.06-3.252-10.141-.853-8.05 6.319-15.379 13.555-21.74 21.493-2.481 3.086-2.116 7.559.802 10.214 9.353 8.47 12.373 21.944 7.514 33.53-4.639 11.05-16.11 18.16-29.24 18.16-4.261-.137-7.296 2.723-7.762 6.597-1.182 10.1-1.196 20.383-.058 30.561.422 3.794 4.961 6.608 8.812 6.608 11.702-.299 22.937 6.946 27.65 18.415 4.698 11.454 1.678 24.804-7.514 33.23-2.875 2.641-3.24 7.06-.817 10.126 6.244 7.953 13.409 15.19 21.259 21.508 3.079 2.481 7.559 2.131 10.228-.81 8.04-8.893 22.427-12.184 33.501-7.536 11.599 4.852 18.895 16.575 18.18 29.17-.233 3.955 2.67 7.398 6.595 7.85 5.135.599 10.301.898 15.481.898 4.917 0 9.835-.27 14.752-.817 3.897-.43 6.784-3.786 6.653-7.696-.451-12.454 6.946-23.973 18.386-28.657 11.06-4.517 25.286-1.211 33.28 7.572 2.657 2.89 7.05 3.239 10.142.848 8.04-6.304 15.349-13.534 21.74-21.494 2.48-3.079 2.13-7.559-.803-10.213-9.353-8.47-12.388-21.946-7.529-33.524 4.568-10.899 15.612-18.217 27.491-18.217l1.662.043c3.853.313 7.398-2.655 7.865-6.588 1.184-10.1 1.198-20.383.06-30.561m-133.32 60.03c-24.718 0-44.824-20.11-44.824-44.824 0-24.717 20.11-44.824 44.824-44.824 24.717 0 44.823 20.11 44.823 44.824 0 24.718-20.11 44.824-44.823 44.824" fill="#fff" fill-rule="evenodd" fill-opacity=".847" transform="matrix(.12424 0 0 .12424 494.06 510.03)"/></g></svg>'
IMAGE=$ICON

check_yad() {
    if ! hash yad &>/dev/null; then
        echo "YAD is not installed!"
        echo "Please, install it first and then run this script"
        exit 1
    fi
}

YAD() {
    yad --class="$CLASS" --width 400 --title "$TITLE" --image="$ICON" "$@"
}

YAD_LIST() {
    yad --class=$CLASS --list --width=600 --height=500 --column="KERNELS"  \
          --button="gtk-help:4" --button="refresh!refresh:3" --button="remove!remove:2" \
          --button="install!install:1" --button="gtk-quit:0" \
          --text "List of kernels:" --borders=10 \
          --window-icon="$ICON" --image="$IMAGE" --image-on-top \
          --center --title "$TITLE" --window-icon "$ICON" --image "$IMAGE" "$@"
}

fatal() {
    yad --class=$CLASS --center --borders=10 --title $TITLE --error --text="$1"
    exit 1
}

info() {
    YAD --info --text="$@"
}

data_files_check() {
    # First, we check if they're in the same directory
    if [[ ! -f $KERNEL_NAMES_FILE ]] || [[ ! -f $KERNEL_AUR_NAMES_FILE ]]; then
        # if not, we check in DATA_PATH
        KERNEL_NAMES_FILE="$DATA_PATH/$KERNEL_NAMES_FILE"
        KERNEL_AUR_NAMES_FILE="$DATA_PATH/$KERNEL_AUR_NAMES_FILE"
        if [[ ! -f $KERNEL_NAMES_FILE ]] || [[ ! -f $KERNEL_AUR_NAMES_FILE ]]; then
            fatal "Missing data files!"
        fi
    fi
}

usage() {
    yad --class="$CLASS" --width=800 --height=600 --title "${TITLE}" --image="$ICON" --filename="aki-help.txt" --text-info
}

load_kernel_names() {
    KERNEL_NAMES=$(grep -h -v ^# ${KERNEL_NAMES_FILE} | grep -v '^[[:blank:]]*$' | cut -f1 -d ' ' | grep -v \\-docs | grep -v \\-headers | tr '\n' ' ')
    if [[ "$AUR_ENABLED" == "y" ]]; then
      KERNEL_AUR_NAMES=$(grep -h -v ^# ${KERNEL_AUR_NAMES_FILE} | grep -v '^[[:blank:]]*$' | cut -f1 -d ' ' | grep -v \\-docs | grep -v \\-headers | tr '\n' ' ')
    fi
}

kernel_installed_list() {
    for kname in ${KERNEL_NAMES}; do
        name=$(pacman -Qqs $kname | grep -w ^$kname$)
        [[ ! -z "$name" ]] && echo $name
    done
    if [[ "$AUR_ENABLED" == "y" ]]; then
        echo "Please wait..."
        for kname in ${KERNEL_AUR_NAMES}; do
            name=$($AUR_HELPER -Qqs $kname | grep -w ^$kname$)
            [[ ! -z "$name" ]] && echo "$name"
        done
    fi
}

kernel_available_list() {
    for kname in ${KERNEL_NAMES}; do
        name=$(pacman -Ssq $kname | grep -w ^$kname$)
        [[ ! -z "$name" ]] && echo $name
    done
    if [[ "$AUR_ENABLED" == "y" ]]; then
        for kname in ${KERNEL_AUR_NAMES}; do
            name=$($AUR_HELPER -Ssq $kname | grep -w ^$kname$)
            [[ ! -z "$name" ]] && echo "$name"
        done
    fi
}

kernel_remove() {
    pkgremove=()

    for kernel in "$@"; do
        [[ -z "$kernel" ]] && fatal "Invalid argument (use -h for help)."
        [[ ${KERNEL_NAMES} != *"$kernel"* ]] && [[ ${KERNEL_AUR_NAMES} != *"$kernel"* ]] && fatal "Please enter a valid kernel name!"
        [[ $current_kname = $kernel ]] && fatal "You can't remove your current kernel."
        [[ -z $(pacman -Qqs "^$1$") ]] && fatal "Kernel not installed!"

        for pkg in $(pacman -Qqs "$kernel"); do
            pkgremove+=("$pkg")
        done
    done

    echo "pacman -R \"${pkgremove[@]}\""
}

kernel_install() {
    set +euo pipefail
    outofdate="$(pacman -Qqu | tr '\n' ' ')"
    set -euo pipefail

    if [[ -n $outofdate ]]; then
        fatal "The following packages are out of date, please update your system first: $outofdate"
    fi

    pkginstall=()
    use_aur="n"

    kernel=${1:-}

    [[ $current_kname = $kernel ]] && fatal "You can't reinstall your current kernel. Please use 'pacman -Syu' instead to update."
    [[ ${KERNEL_NAMES} != *"$kernel"* ]] && [[ ${KERNEL_AUR_NAMES} != *"$kernel"* ]] && fatal "Please enter a valid kernel name.\n$(kernel_available_list)"
    [[ ${KERNEL_NAMES} != *"$kernel"* ]] && [[ ${KERNEL_AUR_NAMES} == *"$kernel"* ]] && use_aur="y"

    if [[ "$use_aur" != "y" ]]; then
        echo Installing "$kernel"...
        pkexec pacman -Sq $kernel
    else
        echo Installing "$kernel" from AUR...
        $AUR_HELPER -Sq $kernel
    fi
}

check_aur_helper() {
    AUR_HELPER=""
    for helper in $AUR_HELPERS; do
        if [[ "$(pacman -Qsq $helper)" != "" ]]; then
            AUR_HELPER=$helper
            return 0
        fi
    done
    fatal "You need to install one of these AUR helpers ($AUR_HELPERS)"
}


choose_kernel() {
    kernel_installed_list
}

main() {
    KERNELS=$(kernel_available_list)
    while :; do
        KRNL=$(YAD_LIST $KERNELS)
        ret=$?
        KRNL=$(echo $KRNL | cut -d '|' -f 1)
        echo $KRNL

        case $ret in
            4) usage ;;
            3) KERNELS=$(kernel_available_list) ;;
            2) kernel_remove $KRNL ;;
            1) kernel_install $KRNL ;;
            0) exit 0 ;;
        esac
    done
}

###############################################################################

check_yad

IFS=. read -r major minor _ <<< "$(uname -r)"
current_kname=$(uname -s)
current="$current_kname $major.$minor"
# convert string to lower case
current_kname=$(echo $current_kname | tr '[:upper:]' '[:lower:]')

check_aur_helper

AUR_ENABLED="n"
for param in $@; do
    if [[ "$param" == "--aur" ]] || [[ "$param" == "-a" ]]; then
        AUR_ENABLED="y"
        printf "Will use \e[32m$AUR_HELPER\e[0m as AUR helper.\n"
    fi
done

data_files_check
load_kernel_names

main
