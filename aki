#!/bin/bash
# -*- coding: utf-8 -*-
#
#  aki - Antergos Kernel Installer
#  Copyright Â© 2017 Antergos
#
#  Loosely based on code from mhwd-kernel from Manjaro
#
#  Aki is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 3 of the License, or
#  (at your option) any later version.
#
#  Aki is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  The following additional terms are in effect as per Section 7 of the license:
#
#  The preservation of all legal notices and author attributions in
#  the material or in the Appropriate Legal Notices displayed
#  by works containing it is required.
#
#  You should have received a copy of the GNU General Public License
#  along with Aki; If not, see <http://www.gnu.org/licenses/>.

set -euo pipefail

KERNEL_NAMES=""
KERNEL_AUR_NAMES=""
DATA_PATH="/usr/share/aki"
KERNEL_NAMES_FILE="kernels.txt"
KERNEL_AUR_NAMES_FILE="kernels-aur.txt"
AUR_HELPERS="yaourt packer pacaur"

fatal() {
    printf "\e[31mError:\e[0m $1\n" 1>&2; exit 1
}

root_check() {
    if [[ $EUID != 0 ]]; then
        fatal "Please run as root."
    fi
}

data_files_check() {
    # First, we check if they're in the same directory
    if [[ ! -f $KERNEL_NAMES_FILE ]] || [[ ! -f $KERNEL_AUR_NAMES_FILE ]]; then
        # if not, we check in DATA_PATH
        KERNEL_NAMES_FILE="$DATA_PATH/$KERNEL_NAMES_FILE"
        KERNEL_AUR_NAMES_FILE="$DATA_PATH/$KERNEL_AUR_NAMES_FILE"
        if [[ ! -f $KERNEL_NAMES_FILE ]] || [[ ! -f $KERNEL_AUR_NAMES_FILE ]]; then
            fatal "Missing data files!"
        fi
    fi
}

args_check() {
    [[ $1 -lt $2 || $1 -gt $3 ]] && fatal "Please use the right amount of arguments (use -h for help)."
}

usage() {
    echo "Usage: aki [option] [kernel]
        -h  --help               Show this help message
        -i  --install            Install new kernel
        -l  --list               List all available kernels
        -li --list-installed     List installed kernels
        -r  --remove             Remove kernel
        -a  --aur                Enable AUR kernels (disabled by default)"
}

load_kernel_names() {
    KERNEL_NAMES=$(grep -h -v ^# ${KERNEL_NAMES_FILE} | grep -v '^[[:blank:]]*$' | cut -f1 -d ' ' | grep -v \\-docs | grep -v \\-headers | tr '\n' ' ')
    if [[ "$AUR_ENABLED" == "y" ]]; then
      KERNEL_AUR_NAMES=$(grep -h -v ^# ${KERNEL_AUR_NAMES_FILE} | grep -v '^[[:blank:]]*$' | cut -f1 -d ' ' | grep -v \\-docs | grep -v \\-headers | tr '\n' ' ')
    fi
}

kernel_list() {
    printf "\e[32mCurrently running:\e[0m $(uname -r) (${current})\n"
    echo "The following kernels are installed in your system:"
    names=()
    for kname in ${KERNEL_NAMES}; do
        name=$(pacman -Qqs $kname | grep -w ^$kname$)
        [[ ! -z "$name" ]] && echo $name
    done
    if [[ "$AUR_ENABLED" == "y" ]]; then
        for kname in ${KERNEL_AUR_NAMES}; do
            name=$($AUR_HELPER -Qqs $kname | grep -w ^$kname$)
            [[ ! -z "$name" ]] && echo "$name (aur)"
        done
    fi
}

kernel_repo() {
    printf "\e[32mAvailable kernels online:\e[0m\n"
    for kname in ${KERNEL_NAMES}; do
        name=$(pacman -Ssq $kname | grep -w ^$kname$)
        [[ ! -z "$name" ]] && echo $name
    done
    if [[ "$AUR_ENABLED" == "y" ]]; then
        for kname in ${KERNEL_AUR_NAMES}; do
            name=$($AUR_HELPER -Ssq $kname | grep -w ^$kname$)
            [[ ! -z "$name" ]] && echo "$name (aur)"
        done
    fi
}

kernel_remove() {
    pkgremove=()

    for kernel in "$@"; do
        [[ -z "$kernel" ]] && fatal "Invalid argument (use -h for help)."
        [[ ${KERNEL_NAMES} != *"$kernel"* ]] && [[ ${KERNEL_AUR_NAMES} != *"$kernel"* ]] && fatal "Please enter a valid kernel name.\n$(kernel_list)"
        [[ $current_kname = $kernel ]] && fatal "You can't remove your current kernel."
        [[ -z $(pacman -Qqs "^$1$") ]] && fatal "Kernel not installed.\n$(kernel_list)"

        for pkg in $(pacman -Qqs "$kernel"); do
            pkgremove+=("$pkg")
        done
    done

    echo "pacman -R \"${pkgremove[@]}\""
}

kernel_install() {

    set +euo pipefail
    outofdate="$(pacman -Qqu | tr '\n' ' ')"
    set -euo pipefail

    if [[ -n $outofdate ]]; then
        fatal "The following packages are out of date, please update your system first: $outofdate"
    fi

    pkginstall=()
    use_aur="n"

    kernel=${1:-}

    [[ $current_kname = $kernel ]] && fatal "You can't reinstall your current kernel. Please use 'pacman -Syu' instead to update."
    [[ ${KERNEL_NAMES} != *"$kernel"* ]] && [[ ${KERNEL_AUR_NAMES} != *"$kernel"* ]] && fatal "Please enter a valid kernel name.\n$(kernel_repo)"
    [[ ${KERNEL_NAMES} != *"$kernel"* ]] && [[ ${KERNEL_AUR_NAMES} == *"$kernel"* ]] && use_aur="y"

    if [[ "$use_aur" != "y" ]]; then
        echo Installing "$kernel"...
        echo "pacman -S \"$kernel\""
    else
        echo Installing "$kernel" from AUR...
        echo "$AUR_HELPER -S \"$kernel\""
    fi
}

check_aur_helper() {
    AUR_HELPER=""
    for helper in $AUR_HELPERS; do
        if [[ "$(pacman -Qsq $helper)" != "" ]]; then
            AUR_HELPER=$helper
            return 0
        fi
    done
    fatal "You need to install one of these AUR helpers ($AUR_HELPERS)"
}

###############################################################################

IFS=. read -r major minor _ <<< "$(uname -r)"
current_kname=$(uname -s)
current="$current_kname $major.$minor"
# convert string to lower case
current_kname=$(echo $current_kname | tr '[:upper:]' '[:lower:]')

#[[ $(uname -r) == *rt* ]] && [[ $current == $rt_base ]] && current=linux-rt-manjaro
#[[ $(uname -r) == *rt* ]] && [[ $current == $rt_lts_base ]] && current=linux-rt-lts-manjaro

check_aur_helper

AUR_ENABLED="n"
for param in $@; do
    if [[ "$param" == "--aur" ]] || [[ "$param" == "-a" ]]; then
        AUR_ENABLED="y"
        printf "Will use \e[32m$AUR_HELPER\e[0m as AUR helper if needed.\n"
    fi
done

data_files_check
load_kernel_names

while :; do
    case ${1:-"-h"} in
        -a|--aur)               shift ;;
        -h|-\?|--help)          usage
                                exit 0 ;;
        -i|--install)           if [ "${2:-}" ]; then
                                    root_check
                                    shift
                                    kernel_install $1
                                    exit 0
                                else
                                    fatal "Invalid arguments (use -h for help)."
                                fi ;;
        -l|--list-all)          kernel_repo
                                exit 0 ;;
        -li|--list-installed)   kernel_list
                                exit 0 ;;
        -r|--remove)            if [ "${2:-}" ]; then
                                    root_check
                                    shift
                                    kernel_remove $1
                                    exit 0
                                else
                                    fatal "Invalid arguments (use -h for help)."
                                fi ;;
        --)                     shift
                                break ;;
        *)                      echo "Invalid argument '${1:-}'."
                                usage
                                exit 0 ;;
    esac
done
